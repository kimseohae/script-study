// 기존 함수에 new 연산자를 붙여서 호출하면 해당 함수는 생성자 함수로 동작한다
// 일반 함수에 new를 붙여 호출하면 원치않는 생성자 함수처럼 동작할 수 있다

/*

생성자 함수가 동작하는 방식
1. 빈 객체 생성 및 this 바인딩
= 생성자 함수 코드가 실행되기 전 빈 객체가 생성된다. 여기서 이 객체가 생성자 함수가 새로 생성하는 객체이며, 이 객체는 this로 바인딩된다. 이후 생성자 함수의 코드 내부에서 사용된 this는 이 빈 객체를 가리킨다. 생성자 함수가 생성한 객체는 자신을 생성한 생성자 함수의 prototype 프로퍼티가 가리키는 객체를 자신의 프로토타입 객체로 설정한다.

2. this를 통한 프로퍼티 생성
= 이후에는 함수 코드 내부에서 this를 사용해서 앞에서 생성된 빈 객체에 동적으로 프로퍼티나 메서드 생성할 수 있다.

3. 생성된 객체 리턴
= 리턴문이 없을 경우, this로 바인딩된 새로 생성한 객체가 리턴된다. 이것은 명시적으로 this를 리턴해도 결과는 같다.

*/

// Person 생성자 함수
var Person = function (name) {
    this.name = name; //this가 가리키는 빈 객체에 name이라는 동적 프로퍼티를 생성했다.
};

// foo 객체 생성
var foo = new Person('foo'); //Person()은 생성자 함수로 동작
console.log(foo.name); // foo
